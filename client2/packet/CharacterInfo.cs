// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CharacterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb) { return GetRootAsCharacterInfo(_bb, new CharacterInfo()); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb, CharacterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Class { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong CharId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Nickname { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNicknameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNicknameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<CharacterInfo> CreateCharacterInfo(FlatBufferBuilder builder,
      byte @class = 0,
      ulong char_id = 0,
      StringOffset nicknameOffset = default(StringOffset)) {
    builder.StartTable(3);
    CharacterInfo.AddCharId(builder, char_id);
    CharacterInfo.AddNickname(builder, nicknameOffset);
    CharacterInfo.AddClass(builder, @class);
    return CharacterInfo.EndCharacterInfo(builder);
  }

  public static void StartCharacterInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddClass(FlatBufferBuilder builder, byte @class) { builder.AddByte(0, @class, 0); }
  public static void AddCharId(FlatBufferBuilder builder, ulong charId) { builder.AddUlong(1, charId, 0); }
  public static void AddNickname(FlatBufferBuilder builder, StringOffset nicknameOffset) { builder.AddOffset(2, nicknameOffset.Value, 0); }
  public static Offset<CharacterInfo> EndCharacterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CharacterInfo>(o);
  }
}

