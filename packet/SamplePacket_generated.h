// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLEPACKET_SAMPLEPACKET_H_
#define FLATBUFFERS_GENERATED_SAMPLEPACKET_SAMPLEPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace SamplePacket {

struct Vec3;

struct textREQ;
struct textREQBuilder;

struct textACK;
struct textACKBuilder;

struct LoginReq;
struct LoginReqBuilder;

struct CreateCharacterReq;
struct CreateCharacterReqBuilder;

struct SelectCharacterNickNameReq;
struct SelectCharacterNickNameReqBuilder;

struct ResultCode;
struct ResultCodeBuilder;

enum Color : int8_t {
  Color_Red = 1,
  Color_Green = 2,
  Color_Blue = 3,
  Color_MIN = Color_Red,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[4] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (flatbuffers::IsOutRange(e, Color_Red, Color_Blue)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(Color_Red);
  return EnumNamesColor()[index];
}

enum Any : uint8_t {
  Any_NONE = 0,
  Any_textREQ = 1,
  Any_textACK = 2,
  Any_MIN = Any_NONE,
  Any_MAX = Any_textACK
};

inline const Any (&EnumValuesAny())[3] {
  static const Any values[] = {
    Any_NONE,
    Any_textREQ,
    Any_textACK
  };
  return values;
}

inline const char * const *EnumNamesAny() {
  static const char * const names[4] = {
    "NONE",
    "textREQ",
    "textACK",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  if (flatbuffers::IsOutRange(e, Any_NONE, Any_textACK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<SamplePacket::textREQ> {
  static const Any enum_value = Any_textREQ;
};

template<> struct AnyTraits<SamplePacket::textACK> {
  static const Any enum_value = Any_textACK;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float v_[3];

 public:
  Vec3()
      : v_() {
  }
  Vec3(flatbuffers::span<const float, 3> _v) {
    flatbuffers::CastToArray(v_).CopyFromSpan(_v);
  }
  const flatbuffers::Array<float, 3> *v() const {
    return &flatbuffers::CastToArray(v_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct textREQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef textREQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct textREQBuilder {
  typedef textREQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(textREQ::VT_TEXT, text);
  }
  explicit textREQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<textREQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<textREQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<textREQ> CreatetextREQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  textREQBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<textREQ> CreatetextREQDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return SamplePacket::CreatetextREQ(
      _fbb,
      text__);
}

struct textACK FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef textACKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct textACKBuilder {
  typedef textACK Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(textACK::VT_TEXT, text);
  }
  explicit textACKBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<textACK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<textACK>(end);
    return o;
  }
};

inline flatbuffers::Offset<textACK> CreatetextACK(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  textACKBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<textACK> CreatetextACKDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return SamplePacket::CreatetextACK(
      _fbb,
      text__);
}

struct LoginReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PW = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *pw() const {
    return GetPointer<const flatbuffers::String *>(VT_PW);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PW) &&
           verifier.VerifyString(pw()) &&
           verifier.EndTable();
  }
};

struct LoginReqBuilder {
  typedef LoginReq Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LoginReq::VT_ID, id);
  }
  void add_pw(flatbuffers::Offset<flatbuffers::String> pw) {
    fbb_.AddOffset(LoginReq::VT_PW, pw);
  }
  explicit LoginReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoginReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginReq> CreateLoginReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> pw = 0) {
  LoginReqBuilder builder_(_fbb);
  builder_.add_pw(pw);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginReq> CreateLoginReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *pw = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto pw__ = pw ? _fbb.CreateString(pw) : 0;
  return SamplePacket::CreateLoginReq(
      _fbb,
      id__,
      pw__);
}

struct CreateCharacterReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateCharacterReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLASS_ = 4,
    VT_NICKNAME = 6
  };
  int8_t class_() const {
    return GetField<int8_t>(VT_CLASS_, 0);
  }
  const flatbuffers::String *nickname() const {
    return GetPointer<const flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CLASS_, 1) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct CreateCharacterReqBuilder {
  typedef CreateCharacterReq Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_class_(int8_t class_) {
    fbb_.AddElement<int8_t>(CreateCharacterReq::VT_CLASS_, class_, 0);
  }
  void add_nickname(flatbuffers::Offset<flatbuffers::String> nickname) {
    fbb_.AddOffset(CreateCharacterReq::VT_NICKNAME, nickname);
  }
  explicit CreateCharacterReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreateCharacterReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreateCharacterReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateCharacterReq> CreateCreateCharacterReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t class_ = 0,
    flatbuffers::Offset<flatbuffers::String> nickname = 0) {
  CreateCharacterReqBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  builder_.add_class_(class_);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreateCharacterReq> CreateCreateCharacterReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t class_ = 0,
    const char *nickname = nullptr) {
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return SamplePacket::CreateCreateCharacterReq(
      _fbb,
      class_,
      nickname__);
}

struct SelectCharacterNickNameReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SelectCharacterNickNameReqBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NICKNAME = 4
  };
  const flatbuffers::String *nickname() const {
    return GetPointer<const flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct SelectCharacterNickNameReqBuilder {
  typedef SelectCharacterNickNameReq Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nickname(flatbuffers::Offset<flatbuffers::String> nickname) {
    fbb_.AddOffset(SelectCharacterNickNameReq::VT_NICKNAME, nickname);
  }
  explicit SelectCharacterNickNameReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SelectCharacterNickNameReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SelectCharacterNickNameReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<SelectCharacterNickNameReq> CreateSelectCharacterNickNameReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nickname = 0) {
  SelectCharacterNickNameReqBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  return builder_.Finish();
}

inline flatbuffers::Offset<SelectCharacterNickNameReq> CreateSelectCharacterNickNameReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nickname = nullptr) {
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return SamplePacket::CreateSelectCharacterNickNameReq(
      _fbb,
      nickname__);
}

struct ResultCode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResultCodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESCODE = 4
  };
  uint16_t rescode() const {
    return GetField<uint16_t>(VT_RESCODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_RESCODE, 2) &&
           verifier.EndTable();
  }
};

struct ResultCodeBuilder {
  typedef ResultCode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rescode(uint16_t rescode) {
    fbb_.AddElement<uint16_t>(ResultCode::VT_RESCODE, rescode, 0);
  }
  explicit ResultCodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResultCode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResultCode>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResultCode> CreateResultCode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t rescode = 0) {
  ResultCodeBuilder builder_(_fbb);
  builder_.add_rescode(rescode);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_textREQ: {
      auto ptr = reinterpret_cast<const SamplePacket::textREQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_textACK: {
      auto ptr = reinterpret_cast<const SamplePacket::textACK *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace SamplePacket

#endif  // FLATBUFFERS_GENERATED_SAMPLEPACKET_SAMPLEPACKET_H_
