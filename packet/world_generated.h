// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLD_WORLD_H_
#define FLATBUFFERS_GENERATED_WORLD_WORLD_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace world {

struct EnterFieldSync;
struct EnterFieldSyncBuilder;

struct MoveStartSync;
struct MoveStartSyncBuilder;

struct MoveStopSync;
struct MoveStopSyncBuilder;

struct EnterFieldSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EnterFieldSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_POS = 6
  };
  const flatbuffers::Vector<uint32_t> *obj_id() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OBJ_ID);
  }
  const flatbuffers::Vector<const Vec3 *> *pos() const {
    return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJ_ID) &&
           verifier.VerifyVector(obj_id()) &&
           VerifyOffset(verifier, VT_POS) &&
           verifier.VerifyVector(pos()) &&
           verifier.EndTable();
  }
};

struct EnterFieldSyncBuilder {
  typedef EnterFieldSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_obj_id(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> obj_id) {
    fbb_.AddOffset(EnterFieldSync::VT_OBJ_ID, obj_id);
  }
  void add_pos(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> pos) {
    fbb_.AddOffset(EnterFieldSync::VT_POS, pos);
  }
  explicit EnterFieldSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EnterFieldSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EnterFieldSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<EnterFieldSync> CreateEnterFieldSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> obj_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> pos = 0) {
  EnterFieldSyncBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<EnterFieldSync> CreateEnterFieldSyncDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *obj_id = nullptr,
    const std::vector<Vec3> *pos = nullptr) {
  auto obj_id__ = obj_id ? _fbb.CreateVector<uint32_t>(*obj_id) : 0;
  auto pos__ = pos ? _fbb.CreateVectorOfStructs<Vec3>(*pos) : 0;
  return world::CreateEnterFieldSync(
      _fbb,
      obj_id__,
      pos__);
}

struct MoveStartSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveStartSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_DIR = 6,
    VT_SPEED = 8,
    VT_START_TIME = 10
  };
  uint32_t obj_id() const {
    return GetField<uint32_t>(VT_OBJ_ID, 0);
  }
  const Vec2 *dir() const {
    return GetStruct<const Vec2 *>(VT_DIR);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  uint64_t start_time() const {
    return GetField<uint64_t>(VT_START_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJ_ID, 4) &&
           VerifyField<Vec2>(verifier, VT_DIR, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           VerifyField<uint64_t>(verifier, VT_START_TIME, 8) &&
           verifier.EndTable();
  }
};

struct MoveStartSyncBuilder {
  typedef MoveStartSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_obj_id(uint32_t obj_id) {
    fbb_.AddElement<uint32_t>(MoveStartSync::VT_OBJ_ID, obj_id, 0);
  }
  void add_dir(const Vec2 *dir) {
    fbb_.AddStruct(MoveStartSync::VT_DIR, dir);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(MoveStartSync::VT_SPEED, speed, 0.0f);
  }
  void add_start_time(uint64_t start_time) {
    fbb_.AddElement<uint64_t>(MoveStartSync::VT_START_TIME, start_time, 0);
  }
  explicit MoveStartSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MoveStartSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveStartSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveStartSync> CreateMoveStartSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t obj_id = 0,
    const Vec2 *dir = nullptr,
    float speed = 0.0f,
    uint64_t start_time = 0) {
  MoveStartSyncBuilder builder_(_fbb);
  builder_.add_start_time(start_time);
  builder_.add_speed(speed);
  builder_.add_dir(dir);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

struct MoveStopSync FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveStopSyncBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_ID = 4,
    VT_POS = 6
  };
  uint32_t obj_id() const {
    return GetField<uint32_t>(VT_OBJ_ID, 0);
  }
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJ_ID, 4) &&
           VerifyField<Vec3>(verifier, VT_POS, 4) &&
           verifier.EndTable();
  }
};

struct MoveStopSyncBuilder {
  typedef MoveStopSync Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_obj_id(uint32_t obj_id) {
    fbb_.AddElement<uint32_t>(MoveStopSync::VT_OBJ_ID, obj_id, 0);
  }
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(MoveStopSync::VT_POS, pos);
  }
  explicit MoveStopSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MoveStopSync> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveStopSync>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveStopSync> CreateMoveStopSync(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t obj_id = 0,
    const Vec3 *pos = nullptr) {
  MoveStopSyncBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

}  // namespace world

#endif  // FLATBUFFERS_GENERATED_WORLD_WORLD_H_
